{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\BlogAuth\\\\AdvancedNodeAuth\\\\client\\\\src\\\\components\\\\screens\\\\RegisterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport \"./SignUp/SignUp.css\";\n\nconst RegisterScreen = ({\n  history\n}) => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmpassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const registerHandler = async e => {\n    e.preventDefault();\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    if (password !== confirmpassword) {\n      setPassword(\"\");\n      setConfirmPassword(\"\");\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      const {\n        data\n      } = await axios.post(\"/api/auth/register\", {\n        username,\n        email,\n        password\n      }, config);\n      localStorage.setItem(\"authToken\", data.token);\n      history.push(\"/\");\n    } catch (error) {\n      setError(error.response.data.error);\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"SignUp\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"signCard\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loginText\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Registration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"\",\n          onSubmit: registerHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            id: \"name\",\n            placeholder: \"Enter username\",\n            value: username,\n            onChange: e => setUsername(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            required: true,\n            id: \"email\",\n            placeholder: \"Email address\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            required: true,\n            id: \"password\",\n            autoComplete: \"true\",\n            placeholder: \"Enter password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            required: true,\n            id: \"confirmpassword\",\n            autoComplete: \"true\",\n            placeholder: \"Confirm password\",\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Register Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/login\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(RegisterScreen, \"NARYcFT/D+9xv3mzUB5kUKJYsw0=\");\n\n_c = RegisterScreen;\nexport default RegisterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterScreen\");","map":{"version":3,"sources":["E:/BlogAuth/AdvancedNodeAuth/client/src/components/screens/RegisterScreen.js"],"names":["useState","axios","Link","RegisterScreen","history","username","setUsername","email","setEmail","password","setPassword","confirmpassword","setConfirmPassword","error","setError","registerHandler","e","preventDefault","config","header","setTimeout","data","post","localStorage","setItem","token","push","response","target","value"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./SignUp/SignUp.css\";\r\n\r\nconst RegisterScreen = ({ history }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmpassword, setConfirmPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const registerHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    if (password !== confirmpassword) {\r\n      setPassword(\"\");\r\n      setConfirmPassword(\"\");\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n      return setError(\"Passwords do not match\");\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/auth/register\",\r\n        {\r\n          username,\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n\r\n      localStorage.setItem(\"authToken\", data.token);\r\n\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n    <>\r\n      {/* // <div className=\"register-screen\">\r\n    //   <form onSubmit={registerHandler} className=\"register-screen__form\">\r\n    //     <h3 className=\"register-screen__title\">Register</h3>\r\n    //     {error && <span className=\"error-message\">{error}</span>}\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"name\">Username:</label>\r\n    //       <input\r\n    //         type=\"text\"\r\n    //         required\r\n    //         id=\"name\"\r\n    //         placeholder=\"Enter username\"\r\n    //         value={username}\r\n    //         onChange={(e) => setUsername(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"email\">Email:</label>\r\n    //       <input\r\n    //         type=\"email\"\r\n    //         required\r\n    //         id=\"email\"\r\n    //         placeholder=\"Email address\"\r\n    //         value={email}\r\n    //         onChange={(e) => setEmail(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"password\">Password:</label>\r\n    //       <input\r\n    //         type=\"password\"\r\n    //         required\r\n    //         id=\"password\"\r\n    //         autoComplete=\"true\"\r\n    //         placeholder=\"Enter password\"\r\n    //         value={password}\r\n    //         onChange={(e) => setPassword(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"confirmpassword\">Confirm Password:</label>\r\n    //       <input\r\n    //         type=\"password\"\r\n    //         required\r\n    //         id=\"confirmpassword\"\r\n    //         autoComplete=\"true\"\r\n    //         placeholder=\"Confirm password\"\r\n    //         value={confirmpassword}\r\n    //         onChange={(e) => setConfirmPassword(e.target.value)}\r\n    //       />\r\n    //     </div>\r\n    //     <button type=\"submit\" className=\"btn btn-primary\">\r\n    //       Register\r\n    //     </button>\r\n\r\n    //     <span className=\"register-screen__subtext\">\r\n    //       Already have an account? <Link to=\"/login\">Login</Link>\r\n    //     </span>\r\n    //   </form>\r\n    // </div> */}\r\n\r\n      <section id='SignUp'>\r\n        <div className=\"signCard\">\r\n          <div className=\"loginText\">\r\n            <h1>Registration</h1>\r\n          </div>\r\n\r\n          <form action=\"\" onSubmit={registerHandler}>\r\n            <input type=\"text\" required id=\"name\" placeholder=\"Enter username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n            <input type=\"email\" required id=\"email\" placeholder=\"Email address\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n            <input type=\"password\" required id=\"password\" autoComplete=\"true\" placeholder=\"Enter password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n            <input type=\"password\" required id=\"confirmpassword\" autoComplete=\"true\" placeholder=\"Confirm password\" onChange={(e) => setConfirmPassword(e.target.value)}/>\r\n            {/* <input type=\"password\" placeholder='Confirm a password' /> */}\r\n\r\n            {/* <div className=\"uplaod\">\r\n                        <label htmlFor=\"\" style={{fontWeight: 'bold'}}>Upload image</label>\r\n                        <input type=\"file\" style={{ border: 'none', padding: '20px' }} />\r\n                    </div> */}\r\n\r\n\r\n\r\n            {/* <div className=\"check\">\r\n                        <input type=\"checkbox\" />\r\n                        <p>I accept all terms and conditions</p>\r\n                       \r\n                    </div> */}\r\n\r\n            <button>Register Now</button>\r\n\r\n            <p>Already have an account? <Link to=\"/login\">Login</Link></p>\r\n\r\n          </form>\r\n\r\n\r\n\r\n        </div>\r\n      </section>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterScreen;\r\n"]},"metadata":{},"sourceType":"module"}